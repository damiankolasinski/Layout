// MARK: NSLayoutAnchor

struct LayoutAnchor<T: AnyObject> {
    fileprivate let anchor: NSLayoutAnchor<T>
    fileprivate let constant: CGFloat
}

func + <T>(lhs: NSLayoutAnchor<T>, rhs: CGFloat) -> LayoutAnchor<T> {
    return LayoutAnchor(anchor: lhs, constant: rhs)
}

func - <T>(lhs: NSLayoutAnchor<T>, rhs: CGFloat) -> LayoutAnchor<T> {
    return lhs + (-rhs)
}

func == <T>(lhs: NSLayoutAnchor<T>, rhs: NSLayoutAnchor<T>) -> NSLayoutConstraint {
    return lhs.constraint(equalTo: rhs)
}

func >= <T>(lhs: NSLayoutAnchor<T>, rhs: NSLayoutAnchor<T>) -> NSLayoutConstraint {
    return lhs.constraint(greaterThanOrEqualTo: rhs)
}

func <= <T>(lhs: NSLayoutAnchor<T>, rhs: NSLayoutAnchor<T>) -> NSLayoutConstraint {
    return lhs.constraint(lessThanOrEqualTo: rhs)
}

func == <T>(lhs: NSLayoutAnchor<T>, rhs: LayoutAnchor<T>) -> NSLayoutConstraint {
    return lhs.constraint(equalTo: rhs.anchor, constant: rhs.constant)
}

func >= <T>(lhs: NSLayoutAnchor<T>, rhs: LayoutAnchor<T>) -> NSLayoutConstraint {
    return lhs.constraint(greaterThanOrEqualTo: rhs.anchor, constant: rhs.constant)
}

func <= <T>(lhs: NSLayoutAnchor<T>, rhs: LayoutAnchor<T>) -> NSLayoutConstraint {
    return lhs.constraint(lessThanOrEqualTo: rhs.anchor, constant: rhs.constant)
}

// MARK: NSLayoutDimension

struct LayoutDimension {
    fileprivate let dimension: NSLayoutDimension
    fileprivate let multiplier: CGFloat
    fileprivate let constant: CGFloat
}

func + (lhs: NSLayoutDimension, rhs: CGFloat) -> LayoutDimension {
    return LayoutDimension(dimension: lhs, multiplier: 1, constant: rhs)
}

func + (lhs: LayoutDimension, rhs: CGFloat) -> LayoutDimension {
    return LayoutDimension(dimension: lhs.dimension, multiplier: lhs.multiplier, constant: rhs)
}

func - (lhs: NSLayoutDimension, rhs: CGFloat) -> LayoutDimension {
    return LayoutDimension(dimension: lhs, multiplier: 1, constant: -rhs)
}

func - (lhs: LayoutDimension, rhs: CGFloat) -> LayoutDimension {
    return LayoutDimension(dimension: lhs.dimension, multiplier: lhs.multiplier, constant: -rhs)
}

func * (lhs: NSLayoutDimension, rhs: CGFloat) -> LayoutDimension {
    return LayoutDimension(dimension: lhs, multiplier: rhs, constant: 0)
}

func == (lhs: NSLayoutDimension, rhs: CGFloat) -> NSLayoutConstraint {
    return lhs.constraint(equalToConstant: rhs)
}

func >= (lhs: NSLayoutDimension, rhs: CGFloat) -> NSLayoutConstraint {
    return lhs.constraint(greaterThanOrEqualToConstant: rhs)
}

func <= (lhs: NSLayoutDimension, rhs: CGFloat) -> NSLayoutConstraint {
    return lhs.constraint(lessThanOrEqualToConstant: rhs)
}

func == (lhs: NSLayoutDimension, rhs: NSLayoutDimension) -> NSLayoutConstraint {
    return lhs.constraint(equalTo: rhs)
}

func >= (lhs: NSLayoutDimension, rhs: NSLayoutDimension) -> NSLayoutConstraint {
    return lhs.constraint(greaterThanOrEqualTo: rhs)
}

func <= (lhs: NSLayoutDimension, rhs: NSLayoutDimension) -> NSLayoutConstraint {
    return lhs.constraint(lessThanOrEqualTo: rhs)
}

func == (lhs: NSLayoutDimension, rhs: LayoutDimension) -> NSLayoutConstraint {
    return lhs.constraint(equalTo: rhs.dimension, multiplier: rhs.multiplier, constant: rhs.constant)
}

func >= (lhs: NSLayoutDimension, rhs: LayoutDimension) -> NSLayoutConstraint {
    return lhs.constraint(greaterThanOrEqualTo: rhs.dimension, multiplier: rhs.multiplier, constant: rhs.constant)
}

func <= (lhs: NSLayoutDimension, rhs: LayoutDimension) -> NSLayoutConstraint {
    return lhs.constraint(lessThanOrEqualTo: rhs.dimension, multiplier: rhs.multiplier, constant: rhs.constant)
}

infix operator ~: AssignmentPrecedence
func ~(lhs: NSLayoutConstraint, rhs: UILayoutPriority) -> NSLayoutConstraint {
    lhs.priority = rhs
    return lhs
}

extension NSLayoutConstraint {
    static func activate(_ constraints: NSLayoutConstraint...) {
        activate(constraints)
    }
}
